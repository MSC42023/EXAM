pragma solidity ^0.8.0;

contract RestrictedPattern {
    address public owner;
    mapping(address => bool) public allowedAddresses;

    modifier onlyOwner() {
        require(msg.sender == owner, "Restricted to contract owner");
        _;
    }

    modifier onlyAllowed() {
        require(allowedAddresses[msg.sender], "Restricted to allowed addresses");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function addAllowedAddress(address _address) public onlyOwner {
        allowedAddresses[_address] = true;
    }

    function removeAllowedAddress(address _address) public onlyOwner {
        allowedAddresses[_address] = false;
    }

    function restrictedFunction() public onlyAllowed {
        // Restricted logic here
    }
}
